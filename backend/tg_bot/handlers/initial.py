from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from backend.database.models import TGAdmin, Teacher, TelegramUser

router = Router()


class StudentAction(CallbackData, prefix="student"):
    action: str
    id: int


@router.callback_query(F.data == "role_teacher")
async def handle_teacher(callback: CallbackQuery, db_session: AsyncSession, bot):
    user = callback.from_user

    await callback.message.answer(
        "üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await callback.answer()

    admins = await db_session.scalars(select(TGAdmin))
    admin_list = admins.all()
    if not admin_list:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")
        return

    text = (
        f"üë§ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–æ–ª—å –£—á–∏—Ç–µ–ª—è</b>\n\n"
        f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
        f"Username: @{user.username if user.username else '‚Äî'}\n"
        f"ID: <code>{user.id}</code>\n\n"
        f"‚úÖ –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /approve {user.id}\n"
        f"üö´ –ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject {user.id}"
    )

    for admin in admin_list:
        try:
            await bot.send_message(chat_id=admin.user_id, text=text, parse_mode="HTML")
        except Exception as e:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin.user_id}: {e}")


class StudentForm(StatesGroup):
    waiting_for_teacher_id = State()


@router.callback_query(F.data == "role_student")
async def handle_student(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å '–£—á–µ–Ω–∏–∫'."""
    await callback.message.answer("üéí –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (—É—á–∏—Ç–µ–ª—è).")
    await callback.answer()

    await state.set_state(StudentForm.waiting_for_teacher_id)


@router.message(StudentForm.waiting_for_teacher_id)
async def process_teacher_id(
    message: Message, state: FSMContext, db_session: AsyncSession, bot
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—é."""
    try:
        teacher_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID —É—á–∏—Ç–µ–ª—è.")
        return

    teacher = await db_session.scalar(
        select(Teacher).where(Teacher.user_id == teacher_id)
    )
    if not teacher:
        await message.answer("‚ùå –£—á–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    teacher_user = await db_session.scalar(
        select(TelegramUser).where(TelegramUser.id == teacher_id)
    )

    await message.answer(
        f"üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∏—Ç–µ–ª—é "
        f"{teacher_user.first_name or ''} {teacher_user.last_name or ''} "
        f"(@{teacher_user.username or '‚Äî'}). –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
    )

    student = message.from_user
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_student:{student.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_student:{student.id}"
                ),
            ]
        ]
    )

    text = (
        f"üë®‚Äçüéì –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç —É—á–µ–Ω–∏–∫–∞:\n\n"
        f"–ò–º—è: {student.first_name or ''} {student.last_name or ''}\n"
        f"Username: @{student.username or '‚Äî'}\n"
        f"ID: <code>{student.id}</code>\n\n"
        f"–ü—Ä–∏–Ω—è—Ç—å —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞?"
    )

    try:
        await bot.send_message(
            chat_id=teacher_id, text=text, parse_mode="HTML", reply_markup=keyboard
        )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—é.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—á–∏—Ç–µ–ª—é {teacher_id}: {e}")

    await state.clear()


@router.callback_query(F.data.startswith == "approve_student:")
async def handle_student(callback: CallbackQuery, state: FSMContext):
    pass
