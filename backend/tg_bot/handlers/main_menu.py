from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession
from sqlalchemy.orm import raiseload, joinedload, with_loader_criteria

from backend.database.models import Group, TelegramUser, Teacher, TGAdmin

router = Router()


@router.message(F.text == "/menu")
async def main_menu(
    message: types.Message, session_factory: async_sessionmaker[AsyncSession]
):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–±–∏—Ä–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    kb = InlineKeyboardBuilder()

    # –û–±—â–∏–µ –ø—É–Ω–∫—Ç—ã
    # kb.button(text="üìö –ö—É—Ä—Å—ã", callback_data="courses_list")
    # kb.button(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info_menu")

    async with session_factory() as session:
        db_user = await session.scalar(
            select(TelegramUser)
            .where(TelegramUser.id == message.from_user.id)
            .options(
                joinedload(TelegramUser.group_memberships),
                with_loader_criteria(Group, Group.is_active == True),
                joinedload(TelegramUser.teacher),
                with_loader_criteria(Teacher, Teacher.is_active == True),
                joinedload(TelegramUser.admin),
                with_loader_criteria(TGAdmin, TGAdmin.is_active == True),
                raiseload("*"),
            )
        )

        if db_user.group_memberships:
            kb.button(text="üéì –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")
            kb.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–æ–≤", callback_data="group_settings")

        if db_user.teacher:
            kb.button(text="üë©‚Äçüè´ –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="teacher_groups")
            kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∏—Ç–µ–ª—è", callback_data="teacher_settings")

        if db_user.admin:
            kb.button(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")

    kb.adjust(2)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=kb.as_markup())
