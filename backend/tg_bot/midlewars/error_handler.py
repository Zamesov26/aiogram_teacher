from aiogram import BaseMiddleware
from aiogram.types import Update
from typing import Callable, Dict, Any, Awaitable

from backend.services.exceptions.link_exceptions import (
    LinkError,
    InvalidLinkError,
    GroupNotFoundError,
    AlreadyInGroupError,
    GroupJoinError,
)


class ErrorHandlerMiddleware(BaseMiddleware):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any],
    ) -> Any:
        try:
            return await handler(event, data)

        except InvalidLinkError:
            await self._send_message(event, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞.")

        except GroupNotFoundError:
            await self._send_message(event, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")

        except AlreadyInGroupError:
            await self._send_message(event, "‚ÑπÔ∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")

        except GroupJoinError:
            await self._send_message(
                event, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        except LinkError:
            await self._send_message(event, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.")

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ—Ç–∞–ª–∏
            print(f"‚ö†Ô∏è Unhandled error: {e!r}")
            await self._send_message(
                event, "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _send_message(self, event: Update, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ –∞–ø–¥–µ–π—Ç–∞."""
        if getattr(event, "message", None):
            await event.message.answer(text)
        elif getattr(event, "callback_query", None):
            await event.callback_query.message.answer(text)
        elif getattr(event, "inline_query", None):
            # inline-query –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            pass
